var documenterSearchIndex = {"docs":
[{"location":"functions/#API","page":"Functions","title":"API","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Modules = [MFF]\nPrivate = false","category":"page"},{"location":"functions/#MFF.get_data!-Tuple{Val{:vec}, AbstractVector{String}, String, String}","page":"Functions","title":"MFF.get_data!","text":"get_data!(\n  ::Val{:df},\n  AbstractVector{String},\n  startdt::String,\n  enddt::String;\n  prprty::String=\"adjclose\",\n  rng::Nothing=nothing,\n  fixdt::Bool=false,\n  kwargs::NamedTuple=(;title=prprty))::DataFrame\n)\n\nFetch data from Yahoo Finance and return a DataFrame. Alters the input vector by removing the invalid stock tickers.\n\nnote: Note\nYou should import the DataFrames package if you would like to get the result as a DataFrame.\n\nArguments\n\n::Val{:df}: Return a DataFrame.\nAbstractVector{String}: The stock tickers.\nstartdt::String: The start date. The format is \"YYYY-MM-DD\".\nenddt::String: The end date. The format is \"YYYY-MM-DD\".\nprprty::String=\"adjclose\": The property to fetch. The other options are \"open\", \"high\", \"low\", \"close\", \"vol\", \"timestamp\".\nrng::Nothing=nothing: The range of the data. The other options are \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\".\nfixdt::Bool=false: Fix the dates. If true, the dates will be fixed to the range of the data. If false, the dates will be the dates of the data.\nplot::Bool=false: Plot the data.\nkwargs::NamedTuple=(;title=prprty): The keyword arguments for the plot function. The default title is the property. The other options are legend, legend_title, ylabel, title, size, left_margin, bottom_margin, dpi, and marker.\n\nReturns\n\n::Union{DataFrame, Nothing}: The DataFrame of the data or nothing.\n\nMethods\n\nget_data!(::Val{:vec}, AbstractVector{String}, startdt::String, enddt::String; prprty::String=\"adjclose\", rng::Nothing=nothing)\n\nExamples\n\njulia> get_data!(Val(:df), [\"AAPL\", \"MSFT\"], \"2020-01-10\", \"2020-01-15\", prprty=\"high\")\n3×3 DataFrame\n Row │ date        AAPL     MSFT\n     │ Date        Float64  Float64\n─────┼──────────────────────────────\n   1 │ 2020-01-10  75.782   156.118\n   2 │ 2020-01-13  76.8485  156.204\n   3 │ 2020-01-14  76.9696  156.481\n\njulia> get_data!(Val(:vec), [\"AAPL\", \"MSFT\"], \"2020-01-10\", \"2020-01-15\", prprty=\"high\")\n3×2 Matrix{Float64}:\n 75.782   156.118\n 76.8484  156.204\n 76.9696  156.481\n\njulia> assets = [\"MSFT\", \"Invalid\"];\n\njulia> get_data!(Val(:df), assets, \"2020-01-10\", \"2020-01-15\", prprty=\"high\")\n┌ Warning: Invalid is not a valid Symbol.\n└ @ YFinance C:\\Users\\Shayan\\.julia\\packages\\YFinance\\lfXr3\\src\\Prices.jl:205\n3×2 DataFrame\n Row │ date        MSFT\n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2020-01-10  156.118\n   2 │ 2020-01-13  156.204\n   3 │ 2020-01-14  156.481\n\njulia> assets\n1-element Vector{String}:\n \"MSFT\"\n\n\n\n\n\n","category":"method"},{"location":"functions/#MFF.get_data-Tuple{Val{:vec}, String, String, String}","page":"Functions","title":"MFF.get_data","text":"get_data(\n  ::Val{:df},\n  stock::String,\n  startdt::String,\n  enddt::String;\n  prprty::String=\"adjclose\",\n  rng::String=\"1d\",\n  plot::Bool=false,\n  kwargs::NamedTuple=(;title=prprty)\n)\n\nFetch data from Yahoo Finance and return a DataFrame.\n\nnote: Note\nYou should import the DataFrames package if you would like to get the result as a DataFrame.\n\nArguments\n\n::Val{:df}: Return a DataFrame.\nstock::String: The stock ticker.\nstartdt::String: The start date. The format is \"YYYY-MM-DD\".\nenddt::String: The end date. The format is \"YYYY-MM-DD\".\nprprty::String=\"adjclose\": The property to fetch. The other options are \"open\", \"high\", \"low\", \"close\", \"vol\", \"timestamp\".\nrng::Nothing=nothing: The range of the data. The other options are \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\".\nfixdt::Bool=false: Fix the dates. If true, the dates will be fixed to the range of the data. If false, the dates will be the dates of the data.\nplot::Bool=false: Plot the data.\nkwargs::NamedTuple=(;title=prprty): The keyword arguments for the plot function. The default title is the property. The other options are legend, legend_title, ylabel, title, size, left_margin, bottom_margin, dpi, and marker.\n\nReturns\n\nUnion{Vector, Nothing}: The DataFrame of the data or nothing.\n\nMethods\n\n`get_data(::Val{:vec}, stock::String, startdt::String, enddt::String; prprty::String=\"adjclose\", rng::Nothing=nothing)\n\nExamples\n\njulia> using MFF, DataFrames\n\njulia> get_data(Val(:df), \"AAPL\", \"2020-01-10\", \"2020-01-15\")\n3×2 DataFrame\n Row │ date        AAPL\n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2020-01-10  75.2149\n   2 │ 2020-01-13  76.8218\n   3 │ 2020-01-14  75.7844\n\njulia> get_data(Val(:df), \"AAPL\", \"2020-01-10\", \"2020-01-15\", fixdt=true)\n3×2 DataFrame\n Row │ date        AAPL\n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2020-01-10  75.2149\n   2 │ 2020-01-11  76.8218\n   3 │ 2020-01-12  75.7844\n\njulia> get_data(Val(:df), \"AAPL\", \"2020-01-10\", \"2020-01-15\", prprty=\"open\")\n3×2 DataFrame\n Row │ date        AAPL\n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2020-01-10  75.2803\n   2 │ 2020-01-13  75.5324\n   3 │ 2020-01-14  76.7588\n\njulia> get_data(Val(:vec), \"AAPL\", \"2020-01-10\", \"2020-01-15\")\n3-element Vector{Float64}:\n 75.2148666381836\n 76.82177734375\n 75.78443908691406\n\n\n\n\n\n","category":"method"},{"location":"functions/#MFF.gs","page":"Functions","title":"MFF.gs","text":"gs(stocks::AbstractVector{String}, startdt::String, enddt::String, path::String; rng::Union{Nothing, String}=nothing, market::String=\"\", prefix::String=\"\", suffix::String=\"\")\n\nGet \"adjusted close\", \"high\", \"low\", \"open\", and \"volume\" data for a set of stocks and save them to a csv file.\n\nnote: Note\nYou should import the CSV and DataFrames packages before using this function.\n\nArguments\n\nstocks::AbstractVector{String}: A vector of stock tickers.\nstartdt::String: The start date of the data.\nenddt::String: The end date of the data.\npath::String: The path to save the csv file.\nrng::String=\"1d\": The range of the data.\nmarket::String=\"\": The market of the stocks.\nprefix::String=\"\": The prefix of the csv file name.\nsuffix::String=\"\": The suffix of the csv file name.\n\nExample\n\njulia> gs([\"AAPL\", \"MSFT\"], \"2020-01-01\", \"2020-01-31\", pwd())\nSaved close data to <PATH>\nSaved high data to <PATH>\nSaved low data to <PATH>\nSaved open data to <PATH>\nSaved volume data to <PATH>\nSaved dates data to <PATH>\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup  = quote\n    using MFF\nend","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This tiny package provides a simple framework for fetching data from the Yahoo Finance API. It is designed to be used with DataFrames.jl and YFinance.jl. However, the DataFrames.jl dependency can be included as an extension in Julia 1.9+. The package is designed for my personal use and is not intended to be used by others. However, if you find it useful, feel free to use it.This tiny package provides a simple framework for fetching data from the Yahoo Finance API. It is designed to be used with DataFrames.jl and YFinance.jl. However, the DataFrames.jl dependency can be included as an extension in Julia 1.9+. The package is designed for my personal use and is not intended to be used by others. However, if you find it useful, feel free to use it.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/shayandavoodii/MFF.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fetch Close Prices for [\"AAPL\", \"MSFT\"] from 2020-01-01 to 2020-01-10 and store the result in a DataFrame:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using MFF, DataFrames\n\njulia> get_data(Val(:df), [\"AAPL\", \"MSFT\"], \"2020-01-01\", \"2020-01-10\", fixdt=true)\n6×3 DataFrame\n Row │ date        AAPL     MSFT    \n     │ Date        Float64  Float64 \n─────┼──────────────────────────────\n   1 │ 2020-01-02  73.4494  155.762\n   2 │ 2020-01-03  72.7353  153.822\n   3 │ 2020-01-04  73.3149  154.22\n   4 │ 2020-01-05  72.9701  152.814\n   5 │ 2020-01-06  74.1439  155.248\n   6 │ 2020-01-07  75.7188  157.187","category":"page"},{"location":"#Abilites","page":"Home","title":"Abilites","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package can fetch open, high, low, close, adj close, and volume data for a given set of tickers. The data can be returned as a DataFrame or a Vector of values or a Matrix of values. Also, there is ability to plot the data using Plots.jl. Here is an example of fetching open prices for [\"AAPL\", \"MSFT\"] from 2020-01-01 to 2020-01-10 and plotting the result:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using MFF\n\njulia> get_data(Val(:vec), [\"AAPL\", \"MSFT\"], \"2020-01-01\", \"2020-01-10\", prprty=\"open\", plot=true)\n6×2 Matrix{Float64}:\n 72.4443  153.977\n 72.6668  153.531\n 71.8452  152.329\n 73.3247  154.501\n 72.6693  154.123\n 75.1343  156.945","category":"page"},{"location":"","page":"Home","title":"Home","text":"And the following plot is generated automatically:  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"<img src=\"assets/Open.png\" width=\"70%\">","category":"page"}]
}
