var documenterSearchIndex = {"docs":
[{"location":"index.html","page":"Home","title":"Home","text":"DocTestSetup  = quote\r\n    using MFF\r\nend","category":"page"},{"location":"index.html#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This tiny package provides a simple framework for fetching data from the Yahoo Finance API. It is designed to be used with DataFrames.jl and YFinance.jl. However, the DataFrames.jl dependency can be included as an extension in Julia 1.9+. The package is designed for my personal use and is not intended to be used by others. However, if you find it useful, feel free to use it.This tiny package provides a simple framework for fetching data from the Yahoo Finance API. It is designed to be used with DataFrames.jl and YFinance.jl. However, the DataFrames.jl dependency can be included as an extension in Julia 1.9+. The package is designed for my personal use and is not intended to be used by others. However, if you find it useful, feel free to use it.","category":"page"},{"location":"index.html#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The package can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pkg> add https://github.com/shayandavoodii/MFF.git","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Fetch Close Prices for [\"AAPL\", \"MSFT\"] from 2020-01-01 to 2020-01-10 and store the result in a DataFrame:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> using MFF\r\n\r\njulia> get_data(Val(:df), [\"AAPL\", \"MSFT\"], \"2020-01-01\", \"2020-01-10\")\r\n6×3 DataFrame\r\n Row │ date        AAPL     MSFT    \r\n     │ Date        Float64  Float64 \r\n─────┼──────────────────────────────\r\n   1 │ 2020-01-02  73.4494  155.762\r\n   2 │ 2020-01-03  72.7353  153.822\r\n   3 │ 2020-01-04  73.3149  154.22\r\n   4 │ 2020-01-05  72.9701  152.814\r\n   5 │ 2020-01-06  74.1439  155.248\r\n   6 │ 2020-01-07  75.7188  157.187","category":"page"},{"location":"index.html#API","page":"Home","title":"API","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Modules = [MFF]","category":"page"},{"location":"index.html#MFF.get_data-Tuple{Val{:df}, String, String, String}","page":"Home","title":"MFF.get_data","text":"get_data(::Val{:df}, stock::String, startdt::String, enddt::String; prprty::String=\"adjclose\", rng::Nothing=nothing, fixdt::Bool=true)::DataFrame\n\nFetch data from Yahoo Finance and return a DataFrame.\n\nArguments\n\n::Val{:df}: Return a DataFrame.\nstock::String: The stock ticker.\nstartdt::String: The start date. The format is \"YYYY-MM-DD\".\nenddt::String: The end date. The format is \"YYYY-MM-DD\".\nprprty::String=\"adjclose\": The property to fetch. The other options are \"open\", \"high\", \"low\", \"close\", \"vol\", \"timestamp\".\nrng::Nothing=nothing: The range of the data. The other options are \"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\".\nfixdt::Bool=true: Fix the dates. If true, the dates will be fixed to the range of the data. If false, the dates will be the dates of the data.\n\nReturns\n\n::DataFrame: The DataFrame of the data.\n\nMethods\n\nget_data(::Val{:df}, stock::String, startdt::String, enddt::String; prprty::String=\"adjclose\", rng::Nothing=nothing, fixdt::Bool=true)::DataFrame\nget_data(::Val{:vec}, stock::String, startdt::String, enddt::String; prprty::String=\"adjclose\", rng::Nothing=nothing)::Vector{Vector}\n\nExamples\n\njulia> using MFF\n\njulia> get_data(Val(:df), \"AAPL\", \"2020-01-10\", \"2020-01-15\", fixdt=false)\n3×2 DataFrame\n Row │ date        AAPL\n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2020-01-10  75.89\n   2 │ 2020-01-13  77.5113\n   3 │ 2020-01-14  76.4646\n\njulia> get_data(Val(:df), \"AAPL\", \"2020-01-10\", \"2020-01-15\")\n3×2 DataFrame\n Row │ date        AAPL\n     │ Date        Float64\n─────┼─────────────────────\n   1 │ 2020-01-10  75.89\n   2 │ 2020-01-11  77.5113\n   3 │ 2020-01-12  76.4646\n\n\n\n\n\n","category":"method"}]
}
